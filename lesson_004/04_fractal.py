# -*- coding: utf-8 -*-

import simple_draw as sd

sd.resolution = (600, 800)
root_point = sd.get_point(300, 30)


# 1) Написать функцию draw_branches, которая должна рисовать две ветви дерева из начальной точки
# Функция должна принимать параметры:
# - точка начала рисования,
# - угол рисования,
# - длина ветвей,
# Отклонение ветвей от угла рисования принять 30 градусов,

# 2) Сделать draw_branches рекурсивной
# - добавить проверку на длину ветвей, если длина меньше 10 - не рисовать
# - вызывать саму себя 2 раза из точек-концов нарисованных ветвей,
#   с параметром "угол рисования" равным углу только что нарисованной ветви,
#   и параметром "длина ветвей" в 0.75 меньшей чем длина только что нарисованной ветви

# 3) Запустить вашу рекурсивную функцию, используя следующие параметры:
# root_point = sd.get_point(300, 30)
# draw_branches(start_point=root_point, angle=90, length=100)


# Пригодятся функции
# sd.get_point()
# sd.get_vector()
# Возможный результат решения см lesson_004/results/exercise_04_fractal_01.jpg

# можно поиграть -шрифтами- цветами и углами отклонения

# TODO Примерные алгоритм функции c рекурсией:

# TODO объявляем функцию которая принимает три параметра, как написано выше!
# TODO сравниваем если длинна ветки меньше определенного значения то выходим, как написано выше!
# TODO Рисуем вектор, это наш ствол дерева под углом в 90 градусов.
# TODO Чекаем конец этого вектора, и запоминаем. От сюда мы будем рисовать ветки.
# TODO задаем новый угол и длину ветки, так делаем два раза для двух новых вызовов, запоминаем их в разных переменных.
# TODO вызываем два раза нашу функцию, с разными параметрами для того чтобы получились ветки.
# TODO Так и пойдет рекурсия! Функция будет вызывать себя два раза каждый раз пока
# TODO длинна ветки не будет минимальной! (делали проверку в начале функции)

def branch(point, angle, length):
    if length < 10:
        return
    v1 = sd.get_vector(start_point=point, angle=angle, length=length, width=3)
    v1.draw()
    next_point = v1.end_point
    next_angle = angle - delta
    next_length = length * .75
    branch(point=next_point, angle=next_angle, length=next_length)


# TODO тут вызов только одной функции с начальными параметрами
for delta in range(0, -60 + 10, 5):
    branch(point=root_point, angle=90, length=100)
# 4) Усложненное задание (делать по желанию)
# - сделать рандомное отклонение угла ветвей в пределах 40% от 30-ти градусов
# - сделать рандомное отклонение длины ветвей в пределах 20% от коэффициента 0.75
# Возможный результат решения см lesson_004/results/exercise_04_fractal_02.jpg

# Пригодятся функции
# sd.random_number()

sd.pause()
